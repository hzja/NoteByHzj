IO MACRO X,Y
   MOV AH,X
   LEA DX,Y
   INT 21H
   ENDM
DATAS SEGMENT USE16
   A DW 1966H,613H,461H,1383H,1779H,1890H,1098H,623H,286H,799H,1796H,58H,851H,695H,159H
   LEN1 DW ($-A)/2
   B DW 461H,198H,1687H,691H,806H,1890H,677H,326H,1966H,1620H,1770H,1810H,6H,1391H,286H,1102H,1779H,599H,1740H,163H
   LEN2 DW ($-B)/2
   D DW 15 DUP(0)
   LEN3 DW 0
   ;461H,1890H,1966H,286H,1779H
   TEN DW 10
   PROMPT1 DB 'the number of A is:',13,10,'$'
   PROMPT2 DB 'the number of B is:',13,10,'$'
   PROMPT3 DB 'the number of C is:',13,10,'$'
   CRLF DB 13,10,'$'
   STR DB 7 DUP(0);用来储存显示的字符串
DATAS ENDS

STACKS SEGMENT USE16
   ;此处输入堆栈段代码
STACKS ENDS

CODES SEGMENT USE16
   ASSUME CS:CODES,DS:DATAS,SS:STACKS

START:
    MOV AX,DATAS
    MOV DS,AX

    IO 09H,PROMPT1
    LEA SI,A
    MOV CX,LEN1
Y1: MOV AX,[SI]
    CALL DISP
    CMP CL,1
    JZ S1
    MOV DL,','
    MOV AH,2H
    INT 21H
S1: ADD SI,2
    LOOP Y1
    IO 09H,CRLF

    IO 09H,PROMPT2
    LEA SI,B
    MOV CX,LEN2
Y2: MOV AX,[SI]
    CALL DISP
    CMP CL,1
    JZ S2
    MOV DL,','
    MOV AH,2H
    INT 21H
S2: ADD SI,2
    LOOP Y2
    IO 09H,CRLF

    CALL SUM

    IO 09H,PROMPT3
    LEA SI,D
    MOV CX,LEN3
Y3: MOV AX,[SI]
    CALL DISP
    CMP CL,1
    JZ S3
    MOV DL,','
    MOV AH,2H
    INT 21H
S3: ADD SI,2
    LOOP Y3

    MOV AH,4CH
    INT 21H

DISP PROC NEAR;显示程序，入口为AX
   PUSH BX
   PUSH AX
   PUSH SI
   PUSH CX
   PUSH DI
   MOV DI,0
   MOV CX,0
   OR AX,AX
   JNS L1
   MOV STR[DI],'-'
   INC DI
   NEG AX
L1:  XOR DX,DX
   DIV TEN
   PUSH DX
   INC CX
   CMP AX,0
   JNZ L1
L2: POP AX
   ADD AL,30H
   MOV STR[DI],AL
   INC DI
   LOOP L2
   MOV STR[DI],'$'
   IO 09H,STR 
   POP DI
   POP CX
   POP SI
   POP AX
   POP BX
   RET
DISP ENDP 

DELETE PROC NEAR
   PUSH DX
   MOV DL,8H;退格
   MOV AH,2H
   INT 21H
   MOV DL,' ';将逗号填充成空格
   MOV AH,2H
   INT 21H
   POP DX
   RET
DELETE ENDP

SUM PROC NEAR
    PUSH AX
    PUSH BX
    PUSH CX
    PUSH DX
    PUSH SI
    PUSH DI
    LEA SI,D
    LEA BX,B
    MOV CX,LEN2
R1: PUSH CX
    LEA DI,A
    MOV CX,LEN1
R2: MOV AX,[DI]
    CMP AX,[BX]
    JNZ NEXT
    MOV [SI],AX
    ADD SI,2
    INC LEN3
NEXT: ADD DI,2
    LOOP R2
    POP CX
    ADD BX,2
    LOOP R1
    POP DI
    POP SI
    POP DX
    POP CX
    POP BX
    POP AX
    RET
SUM ENDP

CODES ENDS
   END START
